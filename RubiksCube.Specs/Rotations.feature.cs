// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RubiksCube.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Rotations")]
    public partial class RotationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Rotations.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Rotations", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cube X Rotations")]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "1", "Orange", "Yellow", "Red", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "1", "Red", "White", "Orange", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "2", "Yellow", "Red", "White", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "2", "Yellow", "Red", "White", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "3", "Red", "White", "Orange", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "3", "Orange", "Yellow", "Red", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "4", "White", "Orange", "Yellow", "Red", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "4", "White", "Orange", "Yellow", "Red", new string[0])]
        public virtual void CubeXRotations(string direction, string times, string front_Color, string up_Color, string back_Color, string down_Color, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cube X Rotations", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("a new cube with a front white face and a top orange face", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When(string.Format("turns the cube on X \"{0}\" {1} times", direction, times), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then(string.Format("the \"Front\" face is \"{0}\"", front_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 7
  testRunner.And(string.Format("the \"Up\" face is \"{0}\"", up_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
  testRunner.And(string.Format("the \"Back\" face is \"{0}\"", back_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
  testRunner.And(string.Format("the \"Down\" face is \"{0}\"", down_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cube Y Rotations")]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "1", "Blue", "Yellow", "Green", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "1", "Green", "White", "Blue", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "2", "Yellow", "Green", "White", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "2", "Yellow", "Green", "White", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "3", "Green", "White", "Blue", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "3", "Blue", "Yellow", "Green", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "4", "White", "Blue", "Yellow", "Green", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "4", "White", "Blue", "Yellow", "Green", new string[0])]
        public virtual void CubeYRotations(string direction, string times, string front_Color, string right_Color, string back_Color, string left_Color, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cube Y Rotations", exampleTags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("a new cube with a front white face and a top orange face", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When(string.Format("turns the cube on Y \"{0}\" {1} times", direction, times), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then(string.Format("the \"Front\" face is \"{0}\"", front_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
  testRunner.And(string.Format("the \"Right\" face is \"{0}\"", right_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.And(string.Format("the \"Back\" face is \"{0}\"", back_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
  testRunner.And(string.Format("the \"Left\" face is \"{0}\"", left_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cube Z Rotations")]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "1", "Red", "Green", "Orange", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "1", "Orange", "Blue", "Red", "Green", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "2", "Blue", "Red", "Green", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "2", "Blue", "Red", "Green", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "3", "Orange", "Blue", "Red", "Green", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "3", "Red", "Green", "Orange", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "4", "Green", "Orange", "Blue", "Red", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "4", "Green", "Orange", "Blue", "Red", new string[0])]
        public virtual void CubeZRotations(string direction, string times, string left_Color, string up_Color, string right_Color, string down_Color, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cube Z Rotations", exampleTags);
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("a new cube with a front white face and a top orange face", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When(string.Format("turns the cube on Z \"{0}\" {1} times", direction, times), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then(string.Format("the \"Left\" face is \"{0}\"", left_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
  testRunner.And(string.Format("the \"Up\" face is \"{0}\"", up_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
  testRunner.And(string.Format("the \"Right\" face is \"{0}\"", right_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
  testRunner.And(string.Format("the \"Down\" face is \"{0}\"", down_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Up Face Rotations")]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "1", "Blue", "Yellow", "Green", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "1", "Green", "White", "Blue", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "2", "Yellow", "Green", "White", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "2", "Yellow", "Green", "White", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "3", "Green", "White", "Blue", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "3", "Blue", "Yellow", "Green", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "4", "White", "Blue", "Yellow", "Green", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "4", "White", "Blue", "Yellow", "Green", new string[0])]
        public virtual void UpFaceRotations(string direction, string times, string front_Color, string right_Color, string back_Color, string left_Color, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Up Face Rotations", exampleTags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("a new cube with a front white face and a top orange face", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
 testRunner.When(string.Format("turns the up face \"{0}\" {1} times", direction, times), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then(string.Format("the \"Front\" face \"First\" row is \"{0}\"", front_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
  testRunner.And(string.Format("the \"Right\" face \"First\" row is \"{0}\"", right_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
  testRunner.And(string.Format("the \"Back\" face \"First\" row is \"{0}\"", back_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
  testRunner.And(string.Format("the \"Left\" face \"First\" row is \"{0}\"", left_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Down Face Rotations")]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "1", "Green", "White", "Blue", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "1", "Blue", "Yellow", "Green", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "2", "Yellow", "Green", "White", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "2", "Yellow", "Green", "White", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "3", "Blue", "Yellow", "Green", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "3", "Green", "White", "Blue", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "4", "White", "Blue", "Yellow", "Green", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "4", "White", "Blue", "Yellow", "Green", new string[0])]
        public virtual void DownFaceRotations(string direction, string times, string front_Color, string right_Color, string back_Color, string left_Color, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Down Face Rotations", exampleTags);
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
 testRunner.Given("a new cube with a front white face and a top orange face", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
 testRunner.When(string.Format("turns the down face \"{0}\" {1} times", direction, times), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then(string.Format("the \"Front\" face \"Third\" row is \"{0}\"", front_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
  testRunner.And(string.Format("the \"Right\" face \"Third\" row is \"{0}\"", right_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
  testRunner.And(string.Format("the \"Back\" face \"Third\" row is \"{0}\"", back_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
  testRunner.And(string.Format("the \"Left\" face \"Third\" row is \"{0}\"", left_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Left Face Rotations")]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "1", "Orange", "Yellow", "Red", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "1", "Red", "White", "Orange", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "2", "Yellow", "Red", "White", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "2", "Yellow", "Red", "White", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "3", "Red", "White", "Orange", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "3", "Orange", "Yellow", "Red", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "4", "White", "Orange", "Yellow", "Red", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "4", "White", "Orange", "Yellow", "Red", new string[0])]
        public virtual void LeftFaceRotations(string direction, string times, string front_Color, string up_Color, string back_Color, string down_Color, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Left Face Rotations", exampleTags);
#line 98
this.ScenarioSetup(scenarioInfo);
#line 99
 testRunner.Given("a new cube with a front white face and a top orange face", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
 testRunner.When(string.Format("turns the left face \"{0}\" {1} times", direction, times), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
 testRunner.Then(string.Format("the \"Front\" face \"First\" column is \"{0}\"", front_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 102
  testRunner.And(string.Format("the \"Up\" face \"First\" column is \"{0}\"", up_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
  testRunner.And(string.Format("the \"Back\" face \"First\" column is \"{0}\"", back_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
  testRunner.And(string.Format("the \"Down\" face \"First\" column is \"{0}\"", down_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Right Face Rotations")]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "1", "Red", "White", "Orange", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "1", "Orange", "Yellow", "Red", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "2", "Yellow", "Red", "White", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "2", "Yellow", "Red", "White", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "3", "Orange", "Yellow", "Red", "White", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "3", "Red", "White", "Orange", "Yellow", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "4", "White", "Orange", "Yellow", "Red", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "4", "White", "Orange", "Yellow", "Red", new string[0])]
        public virtual void RightFaceRotations(string direction, string times, string front_Color, string up_Color, string back_Color, string down_Color, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Right Face Rotations", exampleTags);
#line 117
this.ScenarioSetup(scenarioInfo);
#line 118
 testRunner.Given("a new cube with a front white face and a top orange face", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 119
 testRunner.When(string.Format("turns the right face \"{0}\" {1} times", direction, times), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then(string.Format("the \"Front\" face \"Third\" column is \"{0}\"", front_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
  testRunner.And(string.Format("the \"Up\" face \"Third\" column is \"{0}\"", up_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
  testRunner.And(string.Format("the \"Back\" face \"Third\" column is \"{0}\"", back_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
  testRunner.And(string.Format("the \"Down\" face \"Third\" column is \"{0}\"", down_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Front Face Rotations")]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "1", "Red", "Green", "Orange", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "1", "Orange", "Blue", "Red", "Green", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "2", "Blue", "Red", "Green", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "2", "Blue", "Red", "Green", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "3", "Orange", "Blue", "Red", "Green", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "3", "Red", "Green", "Orange", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "4", "Green", "Orange", "Blue", "Red", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "4", "Green", "Orange", "Blue", "Red", new string[0])]
        public virtual void FrontFaceRotations(string direction, string times, string left_Color, string up_Color, string right_Color, string down_Color, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Front Face Rotations", exampleTags);
#line 136
this.ScenarioSetup(scenarioInfo);
#line 137
 testRunner.Given("a new cube with a front white face and a top orange face", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 138
 testRunner.When(string.Format("turns the front face \"{0}\" {1} times", direction, times), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
 testRunner.Then(string.Format("the \"Left\" face \"Third\" column is \"{0}\"", left_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 140
  testRunner.And(string.Format("the \"Up\" face \"Third\" row is \"{0}\"", up_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
  testRunner.And(string.Format("the \"Right\" face \"First\" column is \"{0}\"", right_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
  testRunner.And(string.Format("the \"Down\" face \"Third\" row is \"{0}\"", down_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Back Face Rotations")]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "1", "Orange", "Blue", "Red", "Green", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "1", "Red", "Green", "Orange", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "2", "Blue", "Red", "Green", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "2", "Blue", "Red", "Green", "Orange", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "3", "Red", "Green", "Orange", "Blue", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "3", "Orange", "Blue", "Red", "Green", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Clockwise", "4", "Green", "Orange", "Blue", "Red", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CounterClockwise", "4", "Green", "Orange", "Blue", "Red", new string[0])]
        public virtual void BackFaceRotations(string direction, string times, string left_Color, string up_Color, string right_Color, string down_Color, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Back Face Rotations", exampleTags);
#line 155
this.ScenarioSetup(scenarioInfo);
#line 156
 testRunner.Given("a new cube with a front white face and a top orange face", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 157
 testRunner.When(string.Format("turns the back face \"{0}\" {1} times", direction, times), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
 testRunner.Then(string.Format("the \"Left\" face \"First\" column is \"{0}\"", left_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
  testRunner.And(string.Format("the \"Up\" face \"First\" row is \"{0}\"", up_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
  testRunner.And(string.Format("the \"Right\" face \"Third\" column is \"{0}\"", right_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
  testRunner.And(string.Format("the \"Down\" face \"First\" row is \"{0}\"", down_Color), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
